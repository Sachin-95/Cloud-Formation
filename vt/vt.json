{
  "Description": "Pattern 1 - Auto Scaling",
  "Mappings": {
    "Environment2VPCID": {
      "dev": {
        "VpcId": "vpc-e76c7f82",
        "VpcName": "dev"
      },
      "staging": {
        "VpcId": "vpc-850711e0",
        "VpcName": "prod"
      },
      "prod": {
        "VpcId": "vpc-850711e0",
        "VpcName": "prod"
      }
    },
    "VPCID2Subnets": {
      "vpc-e76c7f82": {
        "private": [
          "subnet-c90c7690",
          "subnet-b736599c",
          "subnet-fb1c3c8c",
          "subnet-396e9804"
        ],
        "public": [
          "subnet-4e2c5617",
          "subnet-79365952",
          "subnet-931b3be4",
          "subnet-7b6f9946"
        ]
      },
      "vpc-850711e0": {
        "private": [
          "subnet-7b706441",
          "subnet-c2d4f3b5",
          "subnet-b07c1e9b",
          "subnet-d8acd581"
        ],
        "public": [
          "subnet-0e706434",
          "subnet-ddd4f3aa",
          "subnet-a67c1e8d",
          "subnet-dbacd582"
        ]
      }
    },
    "VPCID2SecurityGroup": {
      "vpc-e76c7f82": {
        "private": [
          "sg-3307c954"
        ],
        "public": [
          "sg-4814dc2f",
          "sg-3307c954"
        ]
      },
      "vpc-850711e0": {
        "private": [
          "sg-5925e13e"
        ],
        "public": [
          "sg-5925e13e",
          "sg-cad913ad"
        ]
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type.",
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "m3.medium"
    },
    "AMI": {
      "Description": "AMI to use for EC2",
      "MaxLength": "15",
      "MinLength": "10",
      "Type": "String",
      "Default": "ami-d48fe6c3"
    },
    "KeyPairName": {
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters.",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the service instances",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String",
      "Default": "platform"
    },
    "EnvironmentName": {
      "Description": "Chef environment for the game. Ex: dev, staging, prod",
      "MaxLength": "50",
      "MinLength": "1",
      "Type": "String",
      "AllowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "Default": "dev"
    },
    "Public": {
      "Type": "String",
      "ConstraintDescription": "Can contain only ASCII characters.",
      "Description": "subnet Type that used for Instance launch",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true"
    },
    "PublicIP": {
      "Type": "String",
      "ConstraintDescription": "Can contain only ASCII characters.",
      "Description": "subnet Type that used for Instance launch",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true"
    },
    "StackBucketName": {
      "Description": "This bucket contain the userdata script and chef-server validation key",
      "MaxLength": "35",
      "MinLength": "1",
      "Type": "String",
      "Default": "voicethread-platform"
    },
    "StackBucketScript": {
      "Description": "This is the script that will be run before run run_list",
      "MaxLength": "35",
      "MinLength": "1",
      "Type": "String",
      "Default": "wrapper-encrypted.sh"
    },
    "AdminEmail": {
      "Description": "Email for notifications relating to this stack",
      "MaxLength": "35",
      "MinLength": "1",
      "Default": "jaipbapna@gmail.com",
      "Type": "String"
    },
    "AutoscalingDesiredCapacity": {
      "MinValue": "1",
      "Type": "Number",
      "Default": "1"
    },
    "AutoscalingMinSize": {
      "MinValue": "1",
      "Type": "Number",
      "Default": "1"
    },
    "AutoscalingMaxSize": {
      "MinValue": "1",
      "Type": "Number",
      "Default": "1"
    },
    "ServiceName": {
      "Description": "Name of the service Ex: frontend,auth,centrify",
      "MaxLength": "35",
      "MinLength": "1",
      "Type": "String",
      "AllowedValues": [
        "frontend",
        "ed",
        "auth",
        "centrify",
        "compute",
        "export",
        "houstonisd",
        "media",
        "support"
      ],
      "Default": "frontend"
    },
    "IAMInstanceProfile": {
      "Description": "Name of IAM Profile",
      "MaxLength": "100",
      "MinLength": "1",
      "Type": "String",
      "Default": "arn:aws:iam::579119708222:instance-profile/chef-node"
    },
    "ChefServer": {
      "Description": "Select chef-server",
      "MaxLength": "50",
      "MinLength": "1",
      "Type": "String",
      "AllowedValues": [
        "chefserver12-jai",
        "chefserver12-dev",
        "chefserver12-david",
        "chefserver12-prod",
        "prod-chefserver"
      ],
      "Default": "chefserver12-jai"
    },
    "HostedZoneName": {
      "Description": "Name of Hosted Zone",
      "MaxLength": "50",
      "MinLength": "1",
      "Type": "String",
      "Default": "voicethread.net"
    },
    "OwnerName": {
      "Description": "Name of Owner",
      "MaxLength": "20",
      "MinLength": "0",
      "Type": "String",
      "Default": ""
    },
    "Namespace": {
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters.",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the service instances",
      "MaxLength": "25",
      "MinLength": "1",
      "Type": "String",
      "Default": "voicethread"
    }
  },
  "Outputs": {
    "ServiceAutoScalingGroup": {
      "Description": "Auto-scaling Group for the services",
      "Value": {
        "Ref": "AutoScalingGroup"
      }
    },
    "ServiceLaunchConfig": {
      "Description": "Service configuration for the auto-scaling group",
      "Value": {
        "Ref": "LaunchConfig"
      }
    }
  },
  "Conditions": {
    "CheckEnvironment": {
      "Fn::Equals": [
        {
          "Ref": "EnvironmentName"
        },
        "dev"
      ]
    },
    "NoOwner": {
      "Fn::Equals": [
        {
          "Ref": "OwnerName"
        },
        ""
      ]
    },
    "isPublic": {
      "Fn::Equals": [
        {
          "Ref": "Public"
        },
        "true"
      ]
    },
    "isPublicIP": {
      "Fn::Equals": [
        {
          "Ref": "PublicIP"
        },
        "true"
      ]
    }
  },
  "Resources": {
    "LaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "isPublic",
            "true",
            {
              "Fn::If": [
                "isPublicIP",
                "true",
                "false"
              ]
            }
          ]
        },
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfile"
        },
        "ImageId": {
          "Ref": "AMI"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "SecurityGroups": {
          "Fn::If": [
            "isPublic",
            {
              "Fn::FindInMap": [
                "VPCID2SecurityGroup",
                {
                  "Fn::FindInMap": [
                    "Environment2VPCID",
                    {
                      "Ref": "EnvironmentName"
                    },
                    "VpcId"
                  ]
                },
                "public"
              ]
            },
            {
              "Fn::FindInMap": [
                "VPCID2SecurityGroup",
                {
                  "Fn::FindInMap": [
                    "Environment2VPCID",
                    {
                      "Ref": "EnvironmentName"
                    },
                    "VpcId"
                  ]
                },
                "private"
              ]
            }
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "set -x\n",
                "cat >> /etc/profile.d/vt-cf-env.sh << EOF\n",
                "export ENVIRONMENT=",
                {
                  "Ref": "EnvironmentName"
                },
                "\nexport STACK=",
                {
                  "Ref": "AWS::StackName"
                },
                "\nexport ADMIN_EMAIL=",
                {
                  "Ref": "AdminEmail"
                },
                "\nexport STACK_BUCKET=",
                {
                  "Ref": "StackBucketName"
                },
                "\nexport STACK_BUCKET_SCRIPT=",
                {
                  "Ref": "StackBucketScript"
                },
                "\nexport CHEF_SERVER=",
                {
                  "Ref": "ChefServer"
                },
                "\nexport SERVICE_NAME=",
                {
                  "Ref": "ServiceName"
                },
                "\nexport ROLE_NAME=",
                {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Ref": "Namespace"
                      },
                      {
                        "Ref": "ServiceName"
                      },
                      "deploy"
                    ]
                  ]
                },
                "\nexport HOSTED_ZONE_NAME=",
                {
                  "Ref": "HostedZoneName"
                },
                "\nEOF\n",
                "source /etc/profile.d/vt-cf-env.sh\n",
                "mkdir -p /opt/${STACK_BUCKET}\n",
                "aws s3 cp s3://${STACK_BUCKET} /opt/${STACK_BUCKET} --recursive\n",
                "bash /opt/${STACK_BUCKET}/cloudformation/${STACK_BUCKET_SCRIPT}"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "AutoScalingGroup": {
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "DesiredCapacity": {
          "Ref": "AutoscalingDesiredCapacity"
        },
        "HealthCheckGracePeriod": 300,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MaxSize": {
          "Ref": "AutoscalingMaxSize"
        },
        "MinSize": {
          "Ref": "AutoscalingMinSize"
        },
        "Tags": [
          {
            "Key": "environment",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "EnvironmentName"
            }
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "EnvironmentName"
                  },
                  "-",
                  {
                    "Ref": "ServiceName"
                  },
                  ".",
                  {
                    "Ref": "HostedZoneName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "admin",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "AdminEmail"
            }
          },
          {
            "Key": "service",
            "PropagateAtLaunch": "true",
            "Value": {
              "Ref": "ServiceName"
            }
          },
          {
            "Key": "active",
            "PropagateAtLaunch": "true",
            "Value": true
          },
          {
            "Fn::If": [
              "CheckEnvironment",
              {
                "Key": "owner",
                "PropagateAtLaunch": "true",
                "Value": {
                  "Fn::If": [
                    "NoOwner",
                    "no-owner",
                    {
                      "Ref": "OwnerName"
                    }
                  ]
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "VPCZoneIdentifier": {
          "Fn::If": [
            "isPublic",
            {
              "Fn::FindInMap": [
                "VPCID2Subnets",
                {
                  "Fn::FindInMap": [
                    "Environment2VPCID",
                    {
                      "Ref": "EnvironmentName"
                    },
                    "VpcId"
                  ]
                },
                "public"
              ]
            },
            {
              "Fn::FindInMap": [
                "VPCID2Subnets",
                {
                  "Fn::FindInMap": [
                    "Environment2VPCID",
                    {
                      "Ref": "EnvironmentName"
                    },
                    "VpcId"
                  ]
                },
                "private"
              ]
            }
          ]
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
     },
    "CpuAlarmHigh": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "scaleUpPolicy"
          }
        ],
        "AlarmDescription": "Alarm if CPU higher than 50",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "1",
        "InsufficientDataActions": [
          {
            "Ref": "scaleUpPolicy"
          }
        ],
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "600",
        "Statistic": "Average",
        "Threshold": "50"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "CpuAlarmLow": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "scaleDownPolicy"
          }
        ],
        "AlarmDescription": "Alarm if CPU higher than 10",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup"
            }
          }
        ],
        "EvaluationPeriods": "1",
        "InsufficientDataActions": [
          {
            "Ref": "scaleDownPolicy"
          }
        ],
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "300",
        "Statistic": "Average",
        "Threshold": "10"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "scaleDownPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        },
        "Cooldown": 300,
        "ScalingAdjustment": "-1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    },
    "scaleUpPolicy": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        },
        "Cooldown": 300,
        "ScalingAdjustment": "+1"
      },
      "Type": "AWS::AutoScaling::ScalingPolicy"
    }
  }
}
